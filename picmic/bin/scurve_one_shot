#!/usr/bin/env python3
import logging
import sys
import time
import matplotlib.pyplot as plt
import liroc_ptdc_daq as daq
import numpy as np 
import picmic_register_access as cra
import os
import json


class picmic_scurve:

    def __init__(self,id,state,version,filtering=True,falling=False,val_evt=False,pol_neg=False,dc_pa=0):
        daq.configLogger(logging.DEBUG)

        self.feb_id=id
        self.state=state
        self.version=version
        self.sdb=cra.instance()
        self.sdb.download_setup(state,version)
        self.sdb.to_csv_files()
        target=800
        tlsb=target&0xFF
        tmsb=(target>>8)&0xFF
        self.sdb.setup.boards[0].picmic.set("dac_threshold_lsb",tlsb)
        self.sdb.setup.boards[0].picmic.set("dac_threshold_msb",tmsb)
        #Maximal filtering
        if (filtering):
            self.sdb.setup.boards[0].picmic.set("hrx_top_delay",0xF)
            self.sdb.setup.boards[0].picmic.set("hrx_top_bias",0xF)
            self.sdb.setup.boards[0].picmic.set("hrx_top_filter_trailing",1)
            self.sdb.setup.boards[0].picmic.set("hrx_top_filter_leading",1)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_delay",0xF)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_bias",0xF)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_filter_trailing",1)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_filter_leading",1)
        else:
            self.sdb.setup.boards[0].picmic.set("hrx_top_filter_leading",0)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_filter_leading",0)
            self.sdb.setup.boards[0].picmic.set("hrx_top_filter_trailing",0)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_filter_trailing",0)
        # Falling ?
        self.sdb.setup.boards[0].picmic.set("falling_en",falling)
        # ValEvt
        self.sdb.setup.boards[0].picmic.set("Forced_ValEvt",val_evt)
        # Polarity
        self.sdb.setup.boards[0].picmic.set("Polarity",pol_neg)
        # DC_PA
        for ch in range(64):
            if (dc_pa!=0):
                self.setup.boards[0].picmic.set('DC_PA_ch',dc_pa,ch)
        self.sdb.setup.version=998
        self.sdb.to_csv_files()

        
        print(self.sdb.setup.boards[0].picmic_version)
    
        
        

        self.kc705 = daq.KC705Board()
        self.kc705.init()
    
        self.feb = daq.FebBoard(self.kc705)
        self.feb.init()
        self.feb.loadConfigFromCsv(folder='/dev/shm/board_csv', config_name='%s_%d_f_%d_config_picmic.csv' % (self.state,998,self.feb_id))
        self.feb.fpga.enableDownlinkFastControl()
        # disable all liroc channels
        for ch in range(64): self.feb.liroc.maskChannel(ch)
        self.feb.ptdc.setResMode('fine')

        self.feb.ptdc.powerup()
        
        self.kc705.fastbitConfigure(mode='normal', flush_delay=100,
            dig0_edge='rising', dig0_delay=0, 
            dig1_edge='rising', dig1_delay=0)
        # generate a few windows to flush out the agilient patterns
        self.kc705.acqSetWindow(1, 1)
        for _ in range(5): 
            self.kc705.ipbWrite('ACQ_CTRL_2', 1)
            self.kc705.ipbWrite('ACQ_CTRL_2', 0)
            
    def sweep_dac10b(self,start,stop,step):
        scurves = [[] for _ in range(64)]
        for dac10b_val in range(start,stop,step):
            self.feb.liroc.set10bDac(dac10b_val)
            self.feb.liroc.stopScClock()
            counters=self.kc705.acqPtdcCounters(window=1, deadtime=500, window_number=1000)
            for ch, counter in enumerate(counters):
                scurves[ch].append(counter)
        return scurves


    def scurve_single_chan(self,lichan,start=450,stop=750,step=1,dac_loc=32):
        for ch in range(64):
            if (dac_loc!=0):
                self.feb.liroc.setChannelDac(ch, dac_loc)
            self.feb.liroc.maskChannel(ch, ch != lichan)
            #self.feb.liroc.setParam(f'DC_PA_ch{ch}',2)
        scurve = self.sweep_dac10b(start, stop, step)[daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN[lichan]]
        return scurve

    def scurve_all_channels(self,start=450,stop=750,step=1,dac_loc=32):
        for ch in range(64):
            if dac_loc!=0 : self.feb.liroc.setChannelDac(ch, dac_loc)
            self.feb.liroc.maskChannel(ch,False)
        scurves = self.sweep_dac10b(start, stop, step)
        return scurves
    def scurve_loop_one(self,start=450,stop=750,step=1,dac_loc=32):
        scurves = [[] for _ in range(64)]
        for ch in range(64):
            if ch not in daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN: continue
            scurves[ch]=self.scurve_single_chan(ch,start,stop,step,dac_loc)
            print(f"Channel {ch} {scurves[ch]}")
        return scurves
    def scurve_one_channel(self,index,thmin,thmax,thstep=1,dac_loc=64):
        
        # First round thstep=5
        
        scurve2=self.scurve_single_chan(index,start=thmin,stop=thmax,step=thstep,dac_loc=dac_loc)
        scurve2_th=[i for i in range(thmin,thmax,thstep)]
 
        # Now find the transition
        to_0=thmin
        cmax1=max(scurve2)
        cmax_index = scurve2.index(max(scurve2))
        to_1i=to_0
        for t in range(cmax_index,len(scurve2)):
            if (scurve2[t]<0.7*cmax1):
                to_1i=scurve2_th[t]
                break
        to_1a=to_1i
        for t in range(cmax_index,len(scurve2)):
            if (scurve2[t]<0.3*cmax1):
                to_1a=scurve2_th[t]
                break
        to_1=(to_1a+to_1i)//2
        print(f"Seuil raw {to_0}")
        print(f"Scan {thmin}-{thmax}  {scurve2}")
        print(f"Seuil fin {to_1}")
        #val=input("Next channel? ")
        return to_1

    def calib_dac_local(self,thi,tha):
        turn_on=[0 for i in range(64)]
        v6=[0 for i in range(64)]
        for idx in range(64):
            v6[idx]=self.feb.liroc.getParam(f'DAC_local_ch{idx}')
            if idx not in daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN: continue
            to=self.scurve_one_channel(idx,thi,tha,dac_local=0)
            turn_on[idx]=to
        print(f" Turn ON {turn_on}")
        nto=np.array(turn_on)
        # Target
        target=round(np.median(nto))
        print(f"Median target {target}")
        ## Check minimal gain value
        too_low=False
        too_high=False
        vexp=[v6[i] for i in range(64)]
        for idx in range(64):
            gc=v6[idx]
            if (turn_on[idx]!=0):
                gc=v6[idx]+round((target-turn_on[idx])/1.8)
                vexp[idx]=max(1,min(127,gc))
            else:
                continue
            too_low=too_low or (gc<3)
            too_high=too_high or (gc>1020)
        if (too_low):
            target=target+10
        if (too_high):
            target=target-10
        print(f"Median target final {target} \n v6 {v6} \n vexp {vexp}")
        return target,vexp
    def calib_iterative_dac_local(self,thi,tha):
        turn_on=[0 for i in range(64)]
        v6=[0 for i in range(64)]
        
        for idx in range(64):
            v6[idx]=self.feb.liroc.getParam(f'DAC_local_ch{idx}')
            if idx not in daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN: continue
            # First step =5
            to_0=self.scurve_one_channel(idx,thi,tha,thstep=5,dac_loc=0)
            ti0=round(max(to_0-15,thi))
            ta0=round(min(to_0+15,tha))
            to_1=self.scurve_one_channel(idx,ti0,ta0,thstep=1,dac_loc=0)
            turn_on[idx]=to_1
        print(f" Turn ON {turn_on}")
        nto=np.array(turn_on)
        # Target
        target=round(np.median(nto))
        print(f"Median target {target}")
        ## Check minimal gain value
        too_low=False
        too_high=False
        vexp=[v6[i] for i in range(64)]
        for idx in range(64):
            gc=v6[idx]
            if (turn_on[idx]!=0):
                gc=v6[idx]+round((target-turn_on[idx])/1.8)
                vexp[idx]=max(1,min(127,gc))
            else:
                continue
            too_low=too_low or (gc<3)
            too_high=too_high or (gc>127)
        if (too_low):
            target=target+10
        if (too_high):
            target=target-10
        print(f"Median target final {target} \n v6 {v6} \n vexp {vexp}")
        for idx in range(64):
            if idx not in daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN: continue
            dac_map={}
            for gg in range(max(1,vexp[idx]-2),min(128,vexp[idx]+3)):
                self.feb.liroc.setParam(f'DAC_local_ch{idx}',gg)  
                to_fine=self.scurve_one_channel(idx,target-20,target+20,thstep=1,dac_loc=0)
                dac_map[gg]=abs(target-to_fine)
                print(f"\t Channel {idx} target {target} dac {gg} turn on {to_fine} diff {dac_map[gg]}")
            op_dac=min(dac_map, key = dac_map.get)
            vexp[idx]=op_dac
        return target,vexp
def main(state,version,feb_id,all_channels,loop_one,location=None,upload_comment=None,thmin=420,thmax=750):
    pb=picmic_scurve(feb_id,state,version)
   
    upload=(upload_comment!=None)
    if (all_channels):
        res={}
        res["state"]=state
        res["version"]=version
        res["feb"]=feb_id
        res["thmin"]=thmin
        res["thmax"]=thmax
        res["thstep"]=1
        res["asic"]="LIROC"
        res["ctime"]=time.time()
        res["analysis"]="SCURVE_A"
        res["channels"]=[]
        scurves=pb.scurve_all_channels(start=thmin,stop=thmax,step=1,dac_loc=0)
        for liroc_chan in daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN.keys():
            rc={}
            rc["prc"]=liroc_chan
            rc["tdc"]=daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN[liroc_chan]
            rc["scurve"]=scurves[liroc_chan]
            res["channels"].append(rc)
            plt.plot(range(thmin, thmax,1), scurves[liroc_chan], '+-', label=f"ch{liroc_chan}")
        plt.grid()
        plt.legend(loc="upper right")
        plt.show()
        runid=None
        if upload_comment!=None:
            runobj=pb.sdb.getRun(location,upload_comment)
            runid=runobj['run']

        # Store results in json
        res_dir='results/%s_%d_f_%d' % (state,version,feb_id)
        if runid==None:
            runid=int(input("Enter a run number: "))
        os.system("mkdir -p %s" % res_dir)
        fout=open(f"{res_dir}/scurves_all_channels_{runid}.json","w")
        fout.write(json.dumps(res))
        fout.close

        if upload_comment!=None:
            pb.sdb.upload_results(runid,location,res["state"],res["version"],res["feb"],res["analysis"],res,upload_comment)

    elif loop_one:
        res={}
        res["state"]=state
        res["version"]=version
        res["feb"]=feb_id
        res["thmin"]=thmin
        res["thmax"]=thmax
        res["thstep"]=1
        res["asic"]="LIROC"
        res["ctime"]=time.time()
        res["analysis"]="SCURVE_1"
        res["channels"]=[]
        scurves=pb.scurve_loop_one(start=thmin,stop=thmax,step=1,dac_loc=0)
        for liroc_chan in daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN.keys():
            rc={}
            rc["prc"]=liroc_chan
            rc["tdc"]=daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN[liroc_chan]
            rc["scurve"]=scurves[liroc_chan]
            res["channels"].append(rc)
            plt.plot(range(thmin, thmax,1), scurves[liroc_chan], '+-', label=f"ch{liroc_chan}")
        plt.grid()
        plt.legend(loc="upper right")
        plt.show()
        runid=None
        if upload_comment!=None:
            runobj=pb.sdb.getRun(location,upload_comment)
            runid=runobj['run']
        # Store results in json
        res_dir='results/%s_%d_f_%d' % (state,version,feb_id)
        if runid==None:
            runid=int(input("Enter a run number: "))
        os.system("mkdir -p %s" % res_dir)
        fout=open(f"{res_dir}/scurves_1_channels_{runid}.json","w")
        fout.write(json.dumps(res))
        fout.close

        if upload_comment!=None:
            pb.sdb.upload_results(runid,location,res["state"],res["version"],res["feb"],res["analysis"],res,upload_comment)
            
    else:
        target,v_dac_local=pb.calib_iterative_dac_local(thmin,thmax)
        print(target)
        print(v_dac_local)
        # Upload to DB
        for  ich in range(len(v_dac_local)):
            pb.sdb.setup.boards[0].picmic.set("DAC_local_ch",v_dac_local[ich],ich)
            print(f"DAC_local_ch{ich}",v_dac_local[ich])
        tlsb=target&0xFF
        tmsb=(target>>8)&0xFF
        pb.sdb.setup.boards[0].picmic.set("dac_threshold_lsb",tlsb)
        pb.sdb.setup.boards[0].picmic.set("dac_threshold_msb",tmsb)
        #results=make_pedestal_all_channels(state,version,feb_id,feb,an,thi,tha,1,v6=v6_cor)
        #val=input("Next ASIC ? ")
            
    
        if (upload):
            cm=upload_comment
            pb.sdb.setup.version=version
            pb.sdb.upload_changes(cm)
        else:
            pb.sdb.setup.version=999
            pb.sdb.setup.to_csv_files()
                
                

    

    
if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    
    # configure all the actions
    grp_action = parser.add_mutually_exclusive_group()
    grp_action.add_argument('--allchan', dest='allchan', default=False, action='store_true',help="Make Scurve allchannels on")
    grp_action.add_argument('--one', dest='one', default=False, action='store_true',help="Make Scurve one by one")
    # Arguments
    parser.add_argument('--state', action='store', type=str,default=None, dest='state', help='DB State')
    parser.add_argument('--version', action='store',type=int,default=None,dest='version',help='DB state version' )
    parser.add_argument('--feb', action='store', type=int,default=None, dest='feb', help='FEB id')
    parser.add_argument('--min', action='store', type=int,default=400, dest='thmin', help='Minimal 10b dac')
    parser.add_argument('--max', action='store', type=int,default=700, dest='thmax', help='Maximal 10b dac')
    
    parser.add_argument('--upload', action='store', type=str,default=None, dest='upload', help='Upload comment')
    parser.add_argument('--location', action='store', type=str,default=None, dest='location', help='Experiment name')

    results = parser.parse_args()
    print(results)

    if (results.state==None):
        print("--state should be specified")
        exit(0)
    if (results.version==None):
        print("--version should be specified")
        exit(0)
    if (results.feb==None):
        print("--feb should be specified")
        exit(0)

        
    state=results.state
    version=results.version
    feb_id=results.feb
    all_channels=results.allchan
    loop_one=results.one
    thi=results.thmin
    tha=results.thmax
    cm_up=None
    if (results.upload!=None):
        cm_up=results.upload
    main(state,version,feb_id,all_channels,loop_one,location=results.location,upload_comment=cm_up,thmin=thi,thmax=tha)
