#!/usr/bin/env python3
import logging
from spyne import Application, srpc, ServiceBase, Iterable, UnsignedInteger,Integer,String,Float,Unicode,Integer16
from spyne.protocol.json import JsonDocument
from spyne.protocol.csv import Csv
from spyne.protocol.http import HttpRpc
from spyne.server.wsgi import WsgiApplication
from spyne.model.complex import ComplexModelMeta
from spyne.error import ResourceNotFoundError
import os
#import socks
import socket
import json
from copy import deepcopy
import base64
import time
import MongoAsic as mga
import MongoJob as mgj
import combrc_threaded as crc
import serviceAccess as sac
import pnsAccess

#CORS policy implemnetation

class CorsService(ServiceBase):
    origin = '*'

def _on_method_return_object(ctx):
    ctx.transport.resp_headers['Access-Control-Allow-Origin'] = ctx.descriptor.service_class.origin

CorsService.event_manager.add_listener('method_return_object',_on_method_return_object)
_daq_map={}
_wdj=None
_sconf=None
class MyApplication(Application):
    """ Spyne base application class
    """
    def createAccess(self):
        """ Access creation

        No access to the daq is created here but in the CREATE method of the wddService
        """
        global _wdj
        _wdj=mgj.instance()

        print('febv2 daq is running')

    def call_wrapper(self, ctx):
        """
        Wrapper
        """
        try:
            return super(MyApplication, self).call_wrapper(ctx)

        except KeyError:
            raise ResourceNotFoundError(ctx.in_object)

class wddService(CorsService):
    """ Main service class
    """
    @srpc(String,String,_returns=Iterable(String))
    def REGISTERDAQ(daqmongo,pnsname):
        """ Create a febv2_fsm object

        Args:
            name (str): configuration file name or acquisition state name
            version (int): 0 if file is used or version number
        """
        global _wdj
        global _daq_map
        if not daqmongo in _daq_map:
            _daq_map[daqmongo]={}
            _wdj.downloadConfig(daqmongo.split(':')[0],int(daqmongo.split(':')[1]),True)
            file_config="/dev/shm/mgjob/%s_%s.json" % (daqmongo.split(':')[0],daqmongo.split(':')[1])
            #exit(0)
            _daq_map[daqmongo]["session_name"]=daqmongo.split(':')[0]
            j_sess=json.loads(open(file_config).read())
            pm_hosts=[]
            for x in j_sess["apps"]:
                sh="http://%s:%d" % (x["host"],x["port"])
                if (not sh in pm_hosts):
                    pm_hosts.append(sh)
            _daq_map[daqmongo]["pm_hosts"]=pm_hosts
            _daq_map[daqmongo]["pnsname"]=pnsname
            os.environ["PNS_NAME"] =pnsname
            _daq_map[daqmongo]["pns"]=pnsAccess.pnsAccess()
            _daq_map[daqmongo]["daq"]=crc.combRC(file_config)
        
        print("On est la",daqmongo,pnsname)
        status["content"]={'daq':daqmongo,'pns':pnsname}
        yield json.dumps(status)
    @srpc(String,_returns=Iterable(String))
    def RESTART(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        pm_hosts=_daq_map[daq]["pm_hosts"]
        pns_host=_daq_map[daq]["pnsname"]
        for x in pm_hosts:
            print(x+"/EXIT will be called")
            sac.executeRequest(x+"/EXIT")
        # clear PNS
        pnsurl="http://"+pns_host+":8888/PNS/CLEAR"
        sac.executeRequest(pnsurl)
        status={}
        status["status"]="RESTARTED"
        yield json.dumps(status)
    @srpc(String,_returns=Iterable(String))
    def JC_DESTROY(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fpns=_daq_map[daq]["pns"]
        fpns.remove(_daq_map[daq]["session_name"])
        status={}
        status["status"]="DESTROYED"
        yield json.dumps(status)

    @srpc(String,_returns=Iterable(String))
    def PNS_LIST(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fpns=_daq_map[daq]["pns"]
        rep=fpns.pns_list(_daq_map[daq]["session_name"])
        status={}
        status["content"]=rep
        yield json.dumps(status)

    @srpc(String,_returns=Iterable(String))
    def PNS_SESSION(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fpns=_daq_map[daq]["pns"]
        rep=fpns.pns_session_list()
        status={}
        status["content"]=rep
        yield json.dumps(status)
        
    @srpc(String,_returns=Iterable(String))
    def JC_INFO(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fpns=_daq_map[daq]["pns"]
        fpns.check()
        rep=fpns.pns_list(_daq_map[daq]["session_name"])
        status={}
        status["content"]=fpns.Print(session_name,False)
        yield json.dumps(status)
        
    @srpc(String,_returns=Iterable(String))
    def CREATE(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        fdc.session.Print(True)
        status={}
        status["status"]="CREATED"
        yield json.dumps(status)
        
    @srpc(String,Integer,_returns=Iterable(String))
    def INITIALISE(daq,delay):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        if (delay!=0):
            fdc.reset=delay
            fdc.initialise()
        else:
            fdc.initialise()
        status={}
        status["status"]="INITIALISED"
        yield json.dumps(status)
    @srpc(String,_returns=Iterable(String))
    def CONFIGURE(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        fdc.configure()
        status={}
        status["status"]="CONFIGURED"
        yield json.dumps(status)
        
    @srpc(String,String,_returns=Iterable(String))
    def START(daq,comment):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        fdc.comment=comment
        fdc.start()
        status={}
        status["status"]="RUNNING"
        yield json.dumps(status)
        
    @srpc(String,_returns=Iterable(String))
    def STOP(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        fdc.stop()
        status={}
        status["status"]="CONFIGURED"
        yield json.dumps(status)
        
    @srpc(String,_returns=Iterable(String))
    def DESTROY(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        fdc.destroy()
        status={}
        status["status"]="DETROYED"
        yield json.dumps(status)

    @srpc(String,_returns=Iterable(String))
    def BUILDERSTATUS(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        rep=fdc.BuilderStatus(False)
        status={}
        status["status"]=rep
        yield json.dumps(status)

    @srpc(String,_returns=Iterable(String))
    def SOURCESTATUS(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        rep=fdc.SourceStatus(False)
        status={}
        status["status"]=rep
        yield json.dumps(status)

    @srpc(String,_returns=Iterable(String))
    def TRIGGERSTATUS(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        rep=fdc.TriggerStatus(False)
        status={}
        status["status"]=rep
        yield json.dumps(status)

    @srpc(String,_returns=Iterable(String))
    def RESUME(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        fdc.mdcc_Resume()
        status={}
        status["status"]="RESUMED"
        yield json.dumps(status)

    @srpc(String,_returns=Iterable(String))
    def PAUSE(daq):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        fdc.mdcc_Pause()
        status={}
        status["status"]="RESUMED"
        yield json.dumps(status)

    @srpc(String,String,String,String,_returns=Iterable(String))
    def PROCESS(daq,method,app,params):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        param=json.loads(params)
        rep =fdc.processCommand(method,app,param)
        status={}
        status["status"]=rep
        yield json.dumps(status)

    @srpc(String,String,String,UnsignedInteger,_returns=Iterable(String))
    def DOWNLOADDB(daq,app,state,version):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        lcgi = {}
        lcgi['state'] = state
        lcgi['version'] = version
        rep=fdc.processCommand("DOWNLOADDB",app, lcgi)
        status={}
        status["status"]=rep
        yield json.dumps(status)

    @srpc(String,UnsignedInteger,UnsignedInteger,_returns=Iterable(String))
    def LUTCALIB(daq,tdc,nchannels):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        for i in range(nchannels):
            print("Calibrating channel %d \n" % i )
            fdc.tdcLUTCalib(tdc, i)
        status={}
        status["status"]="DONE"
        yield json.dumps(status)
        
    @srpc(String,String,UnsignedInteger,UnsignedInteger,_returns=Iterable(String))
    def LUTMASK(daq,mask,tdc,feb,nchannels):
        if not daq in _daq_map:
            yield {"status":"NOTREGISTERED","name":daq}
            return
        fdc=_daq_map[daq]["daq"]
        fdc.tdcLUTMask(tdc,mask,feb)
        status={}
        status["status"]="DONE"
        yield json.dumps(status)
        


if __name__=='__main__':
    # Python daemon boilerplate
    from wsgiref.simple_server import make_server
    logging.basicConfig(level=logging.INFO)

    # Instantiate the application by giving it:
    #   * The list of services it should wrap,
    #   * A namespace string.
    #   * An input protocol.
    #   * An output protocol.
    application = MyApplication([wddService], 'spyne.examples.hello.http',
          # The input protocol is set as HttpRpc to make our service easy to
          # call. Input validation via the 'soft' engine is enabled. (which is
          # actually the the only validation method for HttpRpc.)
          in_protocol=HttpRpc(validator='soft'),

          # The ignore_wrappers parameter to JsonDocument simplifies the reponse
          # dict by skipping outer response structures that are redundant when
          # the client knows what object to expect.
          #out_protocol=XmlDocument()
          #out_protocol=YamlDocument(),
          out_protocol=JsonDocument(ignore_wrappers=False),
      )
    application.createAccess()
    # Now that we have our application, we must wrap it inside a transport.
    # In this case, we use Spyne's standard Wsgi wrapper. Spyne supports 
    # popular Http wrappers like Twisted, Django, Pyramid, etc. as well as
    # a ZeroMQ (REQ/REP) wrapper.
    wsgi_application = WsgiApplication(application)

    # More daemon boilerplate
    
    server = make_server(socket.gethostname(), 27027, wsgi_application)

    logging.info("listening to %s:%d" % (socket.gethostname(), 27027))
    ##logging.info("wsdl is at: http://lyosdhcal12:8100/?wsdl")

    server.serve_forever()






