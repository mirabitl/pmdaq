#!/usr/bin/env python3
import os
#import socks
import socket
import json
from copy import deepcopy
import base64
import time
import argparse
import requests
import MongoAsic as mga
import MongoHR2 as mghr2
import MongoPR2 as mgpr2
import MongoLiroc as mgli
from termcolor import colored
def argHandler(res):
    _wdd=mga.instance()
    if (res.states):
        _wdd.states()
        return
    if (res.info):
        if (res.state==None or res.version==None):
            print("State name (--state) and version (--version) should be provided")
        else:
            _wdd.stateInfo(res.state,res.version)
        return
    if (res.asic_info):
        if (res.state==None or res.version==None or res.dif==None or res.num==None):
            print("State name (--state) and version (--version) and dif (--dif) and asic number (--num) should be provided")
        else:
            _wdd.asicInfo(res.state,res.version,res.dif,res.num,param=res.param)
        return
    if (res.download):
        if (res.state==None or res.version==None):
            print("State name (--state) and version (--version) should be provided")
        else:
            _wdd.download(res.state,res.version,True)
        return
    if (res.update_info):
        if (res.state==None or res.version==None):
            print("State name (--state) and version (--version) should be provided")
        else:
            if (res.tag!=None and res.value!=None):
                _wdd.updateStateInfo(res.state,res.version,res.tag,res.value)
        return

# create the default access

#print("COUCOU")
parser = argparse.ArgumentParser()

# configure all the actions
grp_action = parser.add_mutually_exclusive_group()
grp_action.add_argument('--states', action='store_true',help='List all the available states')
grp_action.add_argument('--info', action='store_true',help='print all tags of a given --state and a given --version')
grp_action.add_argument('--asic-info', action='store_true',help='print all tags of a given --state and a given --version --dif dif --num asicnum')

grp_action.add_argument('--update-info', action='store_true',help='Update a given --state and a given --version with --tag and --value arguments')

grp_action.add_argument('--download', action='store_true',
                        help='download the state specified in --state=state --version=version')
# Arguments
parser.add_argument('--version', action='store',type=int,default=1,dest='version',help='DB state version' )
parser.add_argument('--tag', action='store',type=str,default=None,dest='tag',help='Json tag for update' )
parser.add_argument('--value', action='store',default=None,dest='value',help='JSON tag value' )

parser.add_argument('--state', action='store', type=str,
                    default=None, dest='state', help='DB State')
parser.add_argument('--dif', action='store',type=int,default=0,dest='dif',help='dif ID' )
parser.add_argument('--num', action='store',type=int,default=0,dest='num',help='Asic ID' )
parser.add_argument('--param', action='store',type=str,default="all",dest='param',help='json slc param' )

parser.add_argument('--type', action='store', type=str,
                    default=None, dest='type', help='Type HR2,PR2,LIROC')
parser.add_argument('--comment', action='store', type=str,
                    default=None, dest='comment', help='Comment')
parser.add_argument('--file', action='store', type=str,
                    default=None, dest='file', help='file to be parsed ')


results = parser.parse_args()


# Analyse results
# analyse the command
lcgi = {}
r_cmd = None
#print(colored(results,'blue','on_yellow'),results.__dict__)
if (results.type==None):
    argHandler(results)
exit(0)

