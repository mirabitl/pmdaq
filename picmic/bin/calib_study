#!/usr/bin/env python3
import logging
import sys
import time
import csv
import matplotlib.pyplot as plt
import liroc_ptdc_daq as daq
import numpy as np
import picmic_register_access as cra
import os
import json
import agilent81160 as agp

class picmic_calib:

    def __init__(
        self,
        id,
        state,
        version,
        filtering=True,
        falling=0,
        val_evt=0,
        pol_neg=0,
        dc_pa=0,
    ):
        daq.configLogger(logging.DEBUG)

        self.feb_id = id
        self.state = state
        self.version = version
        self.sdb = cra.instance()
        self.sdb.download_setup(state, version)
        self.sdb.to_csv_files()
        target = 800
        tlsb = target & 0xFF
        tmsb = (target >> 8) & 0xFF
        self.sdb.setup.boards[0].picmic.set("dac_threshold_lsb", tlsb)
        self.sdb.setup.boards[0].picmic.set("dac_threshold_msb", tmsb)
        
        # Maximal filtering
        if filtering:
            self.sdb.setup.boards[0].picmic.set("hrx_top_delay", 0xF)
            self.sdb.setup.boards[0].picmic.set("hrx_top_bias", 0xF)
            self.sdb.setup.boards[0].picmic.set("hrx_top_filter_trailing", 1)
            self.sdb.setup.boards[0].picmic.set("hrx_top_filter_leading", 1)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_delay", 0xF)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_bias", 0xF)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_filter_trailing", 1)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_filter_leading", 1)
        else:
            self.sdb.setup.boards[0].picmic.set("hrx_top_filter_leading", 0)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_filter_leading", 0)
            self.sdb.setup.boards[0].picmic.set("hrx_top_filter_trailing", 0)
            self.sdb.setup.boards[0].picmic.set("hrx_bot_filter_trailing", 0)
        # Falling ?
        self.sdb.setup.boards[0].picmic.set("falling_en", falling)
        # ValEvt
        self.sdb.setup.boards[0].picmic.set("Forced_ValEvt", val_evt)
        # Polarity
        self.sdb.setup.boards[0].picmic.set("Polarity", pol_neg)
        # DC_PA
        for ch in range(64):
            if dc_pa != 0:
                self.setup.boards[0].picmic.set("DC_PA_ch", dc_pa, ch)
        self.sdb.setup.version = 888
        self.sdb.to_csv_files()

        print(self.sdb.setup.boards[0].picmic_version)

        self.kc705 = daq.KC705Board()
        self.kc705.init()

        self.feb = daq.FebBoard(self.kc705)
        self.feb.init()
        self.feb.loadConfigFromCsv(
            folder="/dev/shm/board_csv",
            config_name="%s_%d_f_%d_config_picmic.csv" % (self.state, 888, self.feb_id),
        )
        self.feb.fpga.enableDownlinkFastControl()
        # disable all liroc channels
        for ch in range(64):
            self.feb.liroc.maskChannel(ch)
        self.feb.ptdc.setResMode("fine")

        self.feb.ptdc.powerup()

        self.kc705.fastbitConfigure(mode='normal',dig2_edge='rising', dig2_delay=1)
        # generate a few windows to flush out the agilient patterns
        self.kc705.acqSetWindow(1, 1)
        for _ in range(10):
            self.kc705.ipbWrite("ACQ_CTRL_2", 1)
            self.kc705.ipbWrite("ACQ_CTRL_2", 0)

    def sweep_dac10b(self, start, stop, step):
        """
        The swap is done for 1000 windows of 5 cloks with a dead time of 500 clocks
        """
        scurves = [[] for _ in range(64)]
        for dac10b_val in range(start, stop, step):
            self.feb.liroc.set10bDac(dac10b_val)
            self.feb.liroc.stopScClock()
            counters = self.kc705.acqPtdcCounters(
                window=5, deadtime=500, window_number=1000
            )
            for ch, counter in enumerate(counters):
                scurves[ch].append(counter)
        return scurves

    def scurve_all_channels(self, start=450, stop=750, step=1, dac_loc=32):
        for ch in range(64):
            if dac_loc != 0:
                self.feb.liroc.setChannelDac(ch, dac_loc)
            self.feb.liroc.maskChannel(ch, False)
        scurves = self.sweep_dac10b(start, stop, step)
        return scurves

    def scan_charge_one(self,pulser,channel,vmin,vmax,pedestal=566,nstep=20,rise=1.0E-9,delay=120E-9,use_ctest=False):
        #turn_on = [0 for i in range(64)]
        print(f"Scanning channel {channel}")
        if (vmax>1.0 and use_ctest):
            print(f"No automatic scan with High V {vmax} greater than 1 V")
            exit(0)
        vstep=(vmax-vmin)/nstep
        vhigh=[round(x,3) for x in np.arange(vmin,vmax+1E-3,vstep).tolist()]
        pulser.setRiseTime(1,rise)
        pulser.setDelay(1,delay)
        pulser.setON(1)
        scurves=None
        
        for ch in range(64):
            if ch == channel:
                if (use_ctest):
                    self.feb.liroc.setParam(f"Ctest_ch{ch}",True)
                else:
                    self.feb.liroc.setParam(f"Ctest_ch{ch}",False)
                    self.feb.liroc.maskChannel(ch, False)
            else:
                self.feb.liroc.setParam(f"Ctest_ch{ch}",False)
                self.feb.liroc.maskChannel(ch, True)
        turn_on=[ [] for i in range(64)]
        for v in vhigh:
            pulser.setVoltage(1,0,v)
            print(v)
            scurves=self.sweep_dac10b(pedestal+5,1000,1)
            for lch in range(64):
                if lch not in daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN: continue
                sch=scurves[daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN[lch]]
                if (lch == channel):
                    print(lch,1000-(pedestal+5),len(sch),sch)
                i_low=len(sch)
                i_high=-1
                for i in range(len(sch)-1,0,-1):
                    if sch[i]>300 and i_low==len(sch):
                        i_low=i
                    if sch[i]>700 and i_high==-1:
                        i_high=i
                if (i_low==len(sch) or i_high==-1 or i_low==i_high or i_low==len(sch)-1): continue
                i_on=(i_high+i_low)//2
                t_on = pedestal+5+i_on
                print(f"Channel {lch} Pico {daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN[lch]} Index {i_on} Turn on {t_on} DAC {i_on+5} Charge {v}")
                turn_on[lch].append([v,i_on,t_on])
        print(turn_on[channel])
        return turn_on[channel]

def main(
    state,
    version,
    feb_id,
    first_channel,
    last_channel,
    no_injection=False,
    location=None,
    upload_comment=None,
    vmin=0.05,
    vmax=0.9,
    thmin=450,
    thmax=700,
    rising=1.0E-9,
    ctest=False    
):
    pulser=agp.mod81160("../etc/pulse_config.json")
    #agp.print_status()
    if pulser.inst!=None:
        pulser.print_status()
        pulser.configure_pulse()
        pulser.configure_trigger()
        pulser.setOFF(1)
        pulser.print_status()
    else:
        print("No agilent pulser")
        exit(0)
    pb = picmic_calib(feb_id, state, version)

    upload = upload_comment != None
    if no_injection:
        res = {}
        res["state"] = state
        res["version"] = version
        res["feb"] = feb_id
        res["thmin"] = thmin
        res["thmax"] = thmax
        res["thstep"] = 1
        res["asic"] = "LIROC"
        res["ctime"] = time.time()
        res["analysis"] = "SCURVE_A"
        res["channels"] = []
        scurves = pb.scurve_all_channels(start=thmin, stop=thmax, step=1, dac_loc=0)
        for liroc_chan in daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN.keys():
            rc = {}
            rc["prc"] = liroc_chan
            rc["tdc"] = daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN[liroc_chan]
            rc["scurve"] = scurves[liroc_chan]
            res["channels"].append(rc)
            plt.plot(
                range(thmin, thmax, 1),
                scurves[liroc_chan],
                "+-",
                label=f"ch{liroc_chan}",
            )
        plt.grid()
        plt.legend(loc="upper right")
        plt.show()
        runid = None
        if upload_comment != None:
            runobj = pb.sdb.getRun(location, upload_comment)
            runid = runobj["run"]

        # Store results in json
        res_dir = "results/%s_%d_f_%d" % (state, version, feb_id)
        if runid == None:
            runid = int(input("Enter a run number: "))
        os.system("mkdir -p %s" % res_dir)
        fout = open(f"{res_dir}/scurves_all_channels_{runid}.json", "w")
        fout.write(json.dumps(res))
        fout.close

        if upload_comment != None:
            pb.sdb.upload_results(
                runid,
                location,
                res["state"],
                res["version"],
                res["feb"],
                res["analysis"],
                res,
                upload_comment,
            )

    else:
        res={}
        res["vmin"]=vmin
        res["vmax"]=vmax
        res["rise"]=rise
        res["channels"]=[]
        for lch in range(first_channel,last_channel+1):
            if lch not in daq.FebBoard.MAP_LIROC_TO_PTDC_CHAN: continue
            tos=pb.scan_charge_one(pulser,lch,vmin,vmax,rise=rising,use_ctest=ctest)
            res["channels"].append({"channel":lch,"turn_on":tos})
    print(res)
    # Serializing json
    json_object = json.dumps(res)

    # Writing to sample.json
    with open(f"calib_{first_channel}_{last_channel}_{vmax}.json", "w") as outfile:
        outfile.write(json_object)

    pulser.setOFF(1)
    pulser.close()
if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()

    # configure all the actions
    grp_action = parser.add_mutually_exclusive_group()
    grp_action.add_argument(
        "--noinj",
        dest="noinj",
        default=False,
        action="store_true",
        help="Make Scurve allchannels on",
    )
    # Arguments
    parser.add_argument(
        "--state", action="store", type=str, default=None, dest="state", help="DB State"
    )
    parser.add_argument(
        "--version",
        action="store",
        type=int,
        default=None,
        dest="version",
        help="DB state version",
    )
    parser.add_argument(
        "--feb", action="store", type=int, default=None, dest="feb", help="FEB id"
    )
    parser.add_argument(
        "--firstchannel", action="store", type=int, default=None, dest="firstchannel", help="LIROC first channel"
    )
    parser.add_argument(
        "--lastchannel", action="store", type=int, default=None, dest="lastchannel", help="LIROC last channel"
    )
    parser.add_argument(
        "--vmin",
        action="store",
        type=float,
        default=0.05,
        dest="vmin",
        help="Minimal Pulser injection",
    )
    parser.add_argument(
        "--vmax",
        action="store",
        type=float,
        default=0.9,
        dest="vmax",
        help="Maximal pulser injection",
    )
    parser.add_argument(
        "--thmin",
        action="store",
        type=int,
        default=400,
        dest="thmin",
        help="Minimal 10b dac",
    )
    parser.add_argument(
        "--thmax",
        action="store",
        type=int,
        default=700,
        dest="thmax",
        help="Maximal 10b dac",
    )
    parser.add_argument(
        "--rise",
        action="store",
        type=float,
        default=1.0,
        dest="rise",
        help="Rising time (ns)",
    )

    parser.add_argument(
        "--upload",
        action="store",
        type=str,
        default=None,
        dest="upload",
        help="Upload comment",
    )
    parser.add_argument(
        "--location",
        action="store",
        type=str,
        default=None,
        dest="location",
        help="Experiment name",
    )
    parser.add_argument('--ctest', dest='ctest', default=False, action='store_true',help="Use ctest input")

    results = parser.parse_args()
    print(results)

    if results.state == None:
        print("--state should be specified")
        exit(0)
    if results.version == None:
        print("--version should be specified")
        exit(0)
    if results.feb == None:
        print("--feb should be specified")
        exit(0)
    if results.firstchannel == None:
        print("--firstchannel should be specified")
        exit(0)
    if results.lastchannel == None:
        print("--lastchannel should be specified")
        exit(0)
    state = results.state
    version = results.version
    feb_id = results.feb
    firstchannel=results.firstchannel 
    lastchannel=results.lastchannel 
    noinj = results.noinj
    thi = results.thmin
    tha = results.thmax
    vhi=results.vmin
    vha=results.vmax
    rise=results.rise*1.0E-9
    cm_up = None
    if results.upload != None:
        cm_up = results.upload
    main(
        state,
        version,
        feb_id,
        firstchannel,
        lastchannel,
        noinj,
        location=results.location,
        upload_comment=cm_up,
        vmin=vhi,
        vmax=vha,
        thmin=thi,
        thmax=tha,
        rising=rise,
        ctest=results.ctest
    )
