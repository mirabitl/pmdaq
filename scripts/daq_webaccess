#!/usr/bin/env python3
import logging
from spyne import Application, srpc, ServiceBase, Iterable, UnsignedInteger,String,Float,Unicode,Integer16
from spyne.protocol.json import JsonDocument
from spyne.protocol.csv import Csv
from spyne.protocol.http import HttpRpc
from spyne.server.wsgi import WsgiApplication
from spyne.model.complex import ComplexModelMeta
import os
#import socks
import socket
import json
from copy import deepcopy
import base64
import time
import MongoAsic as mga
import MongoJob as mgj
import combrc_threaded as crc
import serviceAccess as sac
import pnsAccess

#CORS policy implemnetation

class CorsService(ServiceBase):
    origin = '*'

def _on_method_return_object(ctx):
    ctx.transport.resp_headers['Access-Control-Allow-Origin'] = ctx.descriptor.service_class.origin

CorsService.event_manager.add_listener('method_return_object',_on_method_return_object)
_daq_map={}
_wdj=None
_sconf=None
class MyApplication(Application):
    """ Spyne base application class
    """
    def createAccess(self):
        """ Access creation

        No access to the daq is created here but in the CREATE method of the wddService
        """
        global _wdj
        _wdj=mgj.instance()

        print('febv2 daq is running')

    def call_wrapper(self, ctx):
        """
        Wrapper
        """
        try:
            return super(MyApplication, self).call_wrapper(ctx)

        except KeyError:
            raise ResourceNotFoundError(ctx.in_object)

class wddService(CorsService):
    """ Main service class
    """
    @srpc(String,String,_returns=Iterable(String))
    def REGISTERDAQ(daqmongo,pnsname):
        """ Create a febv2_fsm object

        Args:
            name (str): configuration file name or acquisition state name
            version (int): 0 if file is used or version number
        """
        global _wdj
        global _daq_map
        if not daqmongo in _daq_map:
            _daq_map[daqmongo]={}
            _wdj.downloadConfig(daqmongo.split(':')[0],int(daqmongo.split(':')[1]),True)
            file_config="/dev/shm/mgjob/%s_%s.json" % (daqmongo.split(':')[0],daqmongo.split(':')[1])
            #exit(0)
            session_name=daqmongo.split(':')[0]
            j_sess=json.loads(open(file_config).read())
            pm_hosts=[]
            for x in j_sess["apps"]:
                sh="http://%s:%d" % (x["host"],x["port"])
                if (not sh in pm_hosts):
                    pm_hosts.append(sh)
            _daq_map[daqmongo]["pm_host"]=pm_hosts
            _daq_map[daqmongo]["pnsname"]=pnsname
            os.environ["PNS_NAME"] =pnsname
            _daq_map[daqmongo]["pns"]=pnsAccess,pnsAccess()
            _daq_map[daqmongo]["daq"]=crc.combRC(file_config)
        
        global _fdc
        global _fpns
        if (state[0]=='"'):
            state=state[1:len(state)-1]
        
        status={}
 
        print("On est la",state,version)
        status["content"]=_wdd.download(state,version,False)
        yield json.dumps(status)
    @srpc(String,UnsignedInteger,_returns=Iterable(String))
    def DOWNLOAD(state,version):
        """ Create a febv2_fsm object

        Args:
            name (str): configuration file name or acquisition state name
            version (int): 0 if file is used or version number
        """
        global _wdd
        if (state[0]=='"'):
            state=state[1:len(state)-1]
        
        status={}
 
        print("On est la",state,version)
        status["content"]=_wdd.download(state,version,False)
        yield json.dumps(status)
    @srpc(String,UnsignedInteger,_returns=Iterable(String))
    def CONFIGURATION(name,version):
        """ Create a febv2_fsm object

        Args:
            name (str): configuration file name or acquisition state name
            version (int): 0 if file is used or version number
        """
        global _wdj
        if (name[0]=='"'):
            name=name[1:len(name)-1]
        
        status={}
 
        print("On est la",name,version)
        #print(_wdj.configurations())
        status["content"]=_wdj.downloadConfig(name,version,False)
        #print(status)
        yield json.dumps(status)
        

        

    @srpc(_returns=Iterable(String))
    def STATES():
        """ calls febv2_fsm initialise transition
        """
        global _wdd
        if (_wdd!=None ):
            
            status={}
            status["content"]=_wdd.states()
            yield json.dumps(status)
        else:
            status={}
            status["STATUS"]="FAILED"
            yield json.dumps(status)
            
    @srpc(_returns=Iterable(String))
    def CONFIGURATIONS():
        """ calls febv2_fsm initialise transition
        """
        global _wdj
        if (_wdj!=None ):
            
            status={}
            status["content"]=_wdj.configurations()
            yield json.dumps(status)
        else:
            status={}
            status["STATUS"]="FAILED"
            yield json.dumps(status)

            
if __name__=='__main__':
    # Python daemon boilerplate
    from wsgiref.simple_server import make_server
    logging.basicConfig(level=logging.INFO)

    # Instantiate the application by giving it:
    #   * The list of services it should wrap,
    #   * A namespace string.
    #   * An input protocol.
    #   * An output protocol.
    application = MyApplication([wddService], 'spyne.examples.hello.http',
          # The input protocol is set as HttpRpc to make our service easy to
          # call. Input validation via the 'soft' engine is enabled. (which is
          # actually the the only validation method for HttpRpc.)
          in_protocol=HttpRpc(validator='soft'),

          # The ignore_wrappers parameter to JsonDocument simplifies the reponse
          # dict by skipping outer response structures that are redundant when
          # the client knows what object to expect.
          #out_protocol=XmlDocument()
          #out_protocol=YamlDocument(),
          out_protocol=JsonDocument(ignore_wrappers=False),
      )
    application.createAccess()
    # Now that we have our application, we must wrap it inside a transport.
    # In this case, we use Spyne's standard Wsgi wrapper. Spyne supports 
    # popular Http wrappers like Twisted, Django, Pyramid, etc. as well as
    # a ZeroMQ (REQ/REP) wrapper.
    wsgi_application = WsgiApplication(application)

    # More daemon boilerplate
    
    server = make_server(socket.gethostname(), 29029, wsgi_application)

    logging.info("listening to %s:%d" % (socket.gethostname(), 29029))
    ##logging.info("wsdl is at: http://lyosdhcal12:8100/?wsdl")

    server.serve_forever()






